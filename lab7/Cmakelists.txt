cmake_minimum_required(VERSION 3.10)
project(lab7)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Добавление опций компиляции
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror=maybe-uninitialized")

# Установка Google Test
include(FetchContent)
FetchContent_Declare(
  googletest
  GIT_REPOSITORY https://github.com/google/googletest.git
  GIT_TAG v1.15.2
  TLS_VERIFY false
)
# For Windows: Prevent overriding the parent project's compiler/linker settings
set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)
FetchContent_MakeAvailable(googletest)

# # компиляция файлов проекта
add_library(${CMAKE_PROJECT_NAME}_lib_utils src/utils.cpp)
add_library(${CMAKE_PROJECT_NAME}_lib_Printer src/Printer.cpp)

add_library(${CMAKE_PROJECT_NAME}_lib_npc src/npc.cpp)
add_library(${CMAKE_PROJECT_NAME}_lib_vaas src/vaas.cpp)
add_library(${CMAKE_PROJECT_NAME}_lib_jason src/jason.cpp)
add_library(${CMAKE_PROJECT_NAME}_lib_buck src/buck.cpp)

add_library(${CMAKE_PROJECT_NAME}_lib_FactoryRandom src/factories/FactoryRandom.cpp)
add_library(${CMAKE_PROJECT_NAME}_lib_FactoryFile src/factories/FactoryFile.cpp)

add_library(${CMAKE_PROJECT_NAME}_lib_ObserverStdout src/observers/ObserverStdout.cpp)
add_library(${CMAKE_PROJECT_NAME}_lib_ObserverFile src/observers/ObserverFile.cpp)

add_library(${CMAKE_PROJECT_NAME}_lib_fightManager src/fightManager.cpp)
add_library(${CMAKE_PROJECT_NAME}_lib_movemanager src/movemanager.cpp)
add_library(${CMAKE_PROJECT_NAME}_lib_mapdrawer src/mapdrawer.cpp)

add_library(${CMAKE_PROJECT_NAME}_lib_game src/game.cpp)

add_executable(${CMAKE_PROJECT_NAME}_exe main.cpp)

target_link_libraries(${CMAKE_PROJECT_NAME}_lib_npc PRIVATE ${CMAKE_PROJECT_NAME}_lib_utils)

target_link_libraries(${CMAKE_PROJECT_NAME}_lib_vaas PRIVATE ${CMAKE_PROJECT_NAME}_lib_utils)
target_link_libraries(${CMAKE_PROJECT_NAME}_lib_vaas PRIVATE ${CMAKE_PROJECT_NAME}_lib_npc)

target_link_libraries(${CMAKE_PROJECT_NAME}_lib_jason PRIVATE ${CMAKE_PROJECT_NAME}_lib_utils)
target_link_libraries(${CMAKE_PROJECT_NAME}_lib_jason PRIVATE ${CMAKE_PROJECT_NAME}_lib_npc)

target_link_libraries(${CMAKE_PROJECT_NAME}_lib_buck PRIVATE ${CMAKE_PROJECT_NAME}_lib_utils)
target_link_libraries(${CMAKE_PROJECT_NAME}_lib_buck PRIVATE ${CMAKE_PROJECT_NAME}_lib_npc)

target_link_libraries(${CMAKE_PROJECT_NAME}_lib_FactoryRandom PRIVATE ${CMAKE_PROJECT_NAME}_lib_utils)
target_link_libraries(${CMAKE_PROJECT_NAME}_lib_FactoryRandom PRIVATE ${CMAKE_PROJECT_NAME}_lib_npc)
target_link_libraries(${CMAKE_PROJECT_NAME}_lib_FactoryRandom PRIVATE ${CMAKE_PROJECT_NAME}_lib_vaas)
target_link_libraries(${CMAKE_PROJECT_NAME}_lib_FactoryRandom PRIVATE ${CMAKE_PROJECT_NAME}_lib_jason)
target_link_libraries(${CMAKE_PROJECT_NAME}_lib_FactoryRandom PRIVATE ${CMAKE_PROJECT_NAME}_lib_buck)

target_link_libraries(${CMAKE_PROJECT_NAME}_lib_FactoryFile PRIVATE ${CMAKE_PROJECT_NAME}_lib_utils)
target_link_libraries(${CMAKE_PROJECT_NAME}_lib_FactoryFile PRIVATE ${CMAKE_PROJECT_NAME}_lib_npc)
target_link_libraries(${CMAKE_PROJECT_NAME}_lib_FactoryFile PRIVATE ${CMAKE_PROJECT_NAME}_lib_vaas)
target_link_libraries(${CMAKE_PROJECT_NAME}_lib_FactoryFile PRIVATE ${CMAKE_PROJECT_NAME}_lib_jason)
target_link_libraries(${CMAKE_PROJECT_NAME}_lib_FactoryFile PRIVATE ${CMAKE_PROJECT_NAME}_lib_buck)

target_link_libraries(${CMAKE_PROJECT_NAME}_lib_ObserverStdout PRIVATE ${CMAKE_PROJECT_NAME}_lib_utils)
target_link_libraries(${CMAKE_PROJECT_NAME}_lib_ObserverStdout PRIVATE ${CMAKE_PROJECT_NAME}_lib_npc)
target_link_libraries(${CMAKE_PROJECT_NAME}_lib_ObserverStdout PRIVATE ${CMAKE_PROJECT_NAME}_lib_Printer)

target_link_libraries(${CMAKE_PROJECT_NAME}_lib_ObserverFile PRIVATE ${CMAKE_PROJECT_NAME}_lib_utils)
target_link_libraries(${CMAKE_PROJECT_NAME}_lib_ObserverFile PRIVATE ${CMAKE_PROJECT_NAME}_lib_npc)

target_link_libraries(${CMAKE_PROJECT_NAME}_lib_fightManager PRIVATE ${CMAKE_PROJECT_NAME}_lib_utils)
target_link_libraries(${CMAKE_PROJECT_NAME}_lib_fightManager PRIVATE ${CMAKE_PROJECT_NAME}_lib_npc)

target_link_libraries(${CMAKE_PROJECT_NAME}_lib_movemanager PRIVATE ${CMAKE_PROJECT_NAME}_lib_utils)
target_link_libraries(${CMAKE_PROJECT_NAME}_lib_movemanager PRIVATE ${CMAKE_PROJECT_NAME}_lib_npc)
target_link_libraries(${CMAKE_PROJECT_NAME}_lib_movemanager PRIVATE ${CMAKE_PROJECT_NAME}_lib_fightManager)

target_link_libraries(${CMAKE_PROJECT_NAME}_lib_mapdrawer PRIVATE ${CMAKE_PROJECT_NAME}_lib_utils)
target_link_libraries(${CMAKE_PROJECT_NAME}_lib_mapdrawer PRIVATE ${CMAKE_PROJECT_NAME}_lib_npc)
target_link_libraries(${CMAKE_PROJECT_NAME}_lib_mapdrawer PRIVATE ${CMAKE_PROJECT_NAME}_lib_Printer)

target_link_libraries(${CMAKE_PROJECT_NAME}_lib_game PRIVATE ${CMAKE_PROJECT_NAME}_lib_utils)
target_link_libraries(${CMAKE_PROJECT_NAME}_lib_mapdrawer PRIVATE ${CMAKE_PROJECT_NAME}_lib_Printer)
target_link_libraries(${CMAKE_PROJECT_NAME}_lib_game PRIVATE ${CMAKE_PROJECT_NAME}_lib_npc)
target_link_libraries(${CMAKE_PROJECT_NAME}_lib_game PRIVATE ${CMAKE_PROJECT_NAME}_lib_vaas)
target_link_libraries(${CMAKE_PROJECT_NAME}_lib_game PRIVATE ${CMAKE_PROJECT_NAME}_lib_jason)
target_link_libraries(${CMAKE_PROJECT_NAME}_lib_game PRIVATE ${CMAKE_PROJECT_NAME}_lib_buck)
target_link_libraries(${CMAKE_PROJECT_NAME}_lib_game PRIVATE ${CMAKE_PROJECT_NAME}_lib_FactoryRandom)
target_link_libraries(${CMAKE_PROJECT_NAME}_lib_game PRIVATE ${CMAKE_PROJECT_NAME}_lib_FactoryFile)
target_link_libraries(${CMAKE_PROJECT_NAME}_lib_game PRIVATE ${CMAKE_PROJECT_NAME}_lib_ObserverStdout)
target_link_libraries(${CMAKE_PROJECT_NAME}_lib_game PRIVATE ${CMAKE_PROJECT_NAME}_lib_ObserverFile)
target_link_libraries(${CMAKE_PROJECT_NAME}_lib_game PRIVATE ${CMAKE_PROJECT_NAME}_lib_fightManager)
target_link_libraries(${CMAKE_PROJECT_NAME}_lib_game PRIVATE ${CMAKE_PROJECT_NAME}_lib_movemanager)
target_link_libraries(${CMAKE_PROJECT_NAME}_lib_game PRIVATE ${CMAKE_PROJECT_NAME}_lib_mapdrawer)

target_link_libraries(${CMAKE_PROJECT_NAME}_exe PRIVATE ${CMAKE_PROJECT_NAME}_lib_game)

# Добавление тестов
enable_testing()

add_executable(tests test/test.cpp)

target_link_libraries(tests ${CMAKE_PROJECT_NAME}_lib_utils)
target_link_libraries(tests ${CMAKE_PROJECT_NAME}_lib_npc)
target_link_libraries(tests ${CMAKE_PROJECT_NAME}_lib_vaas)
target_link_libraries(tests ${CMAKE_PROJECT_NAME}_lib_jason)
target_link_libraries(tests ${CMAKE_PROJECT_NAME}_lib_buck)
target_link_libraries(tests ${CMAKE_PROJECT_NAME}_lib_FactoryRandom)
target_link_libraries(tests ${CMAKE_PROJECT_NAME}_lib_FactoryFile)
target_link_libraries(tests ${CMAKE_PROJECT_NAME}_lib_utils)
target_link_libraries(tests gtest_main)

# Добавление тестов в тестовый набор
add_test(NAME MyProjectTests COMMAND tests)